#pragma once

#include "config.h"

#include <gcrypt.h>

#include <vector>
#include <string>
#include <cstdint>

//#define passcave_NO_ZLIB_COMPRESS

namespace passcave {

// passcave file signature
uint32_t const GCRY_PASSCAVE_SIGNATURE = 0x7e3aec5e;

// passcave prefered extension
std::string const GCRY_PASSCAVE_EXT = "xpc";

// the following adds an extra layer of security, but you we don't rely on it
// instead, we make sure to generate IV using a secure random generation method and to save it along with encrypted data
// the purpose of this, is to make separate binaries that if kept private would generate safer encrypted data
// one could put his own IV here which would be xored with a another securely generated IV
// you need to also put a different file signature (above) if you change this
int const GCRY_INIT_IV_SIZE = 512;
unsigned char const GCRY_INIT_IV[GCRY_INIT_IV_SIZE] = {
	0x6a, 0x8e, 0xcc, 0x3a, 0xdd, 0xa0, 0x94, 0x76, 0x83, 0x3b, 0x7f, 0x52, 0xec, 0x3c, 0x65, 0x96,
	0xaf, 0xae, 0x7f, 0xf6, 0x4c, 0x95, 0x98, 0x73, 0x6b, 0xa8, 0xf2, 0xd9, 0x8e, 0x9d, 0x37, 0xc3,
	0xc8, 0x6f, 0x9b, 0x7a, 0x25, 0x82, 0xd3, 0xf2, 0x2c, 0xe5, 0x61, 0x40, 0xb9, 0x40, 0x73, 0xee,
	0x1e, 0xa2, 0x6c, 0xee, 0x30, 0xd4, 0xb8, 0x0f, 0x80, 0x88, 0x54, 0x1e, 0xd8, 0xdf, 0x64, 0xd8,
	0xc0, 0x46, 0x44, 0x6d, 0x53, 0xa1, 0xac, 0xa2, 0xd7, 0xb4, 0xfb, 0x2c, 0xf6, 0x3d, 0x03, 0x51,
	0xf5, 0xad, 0xdd, 0xe6, 0x32, 0x7f, 0x77, 0x75, 0x1f, 0xf7, 0x17, 0xce, 0xea, 0xc2, 0xec, 0x9f,
	0xa7, 0xf9, 0x03, 0x2b, 0x2e, 0x2a, 0xcc, 0x76, 0x41, 0x54, 0x8e, 0xb0, 0x49, 0x8b, 0x04, 0xc3,
	0x30, 0x81, 0xb6, 0x52, 0x20, 0xe6, 0x1d, 0x37, 0x40, 0xd3, 0x9c, 0x1b, 0x79, 0xe2, 0x34, 0x59,
	0xf3, 0x2e, 0xc9, 0x2d, 0x48, 0x90, 0x7e, 0x41, 0x58, 0x20, 0x04, 0x32, 0xbf, 0xac, 0xe6, 0xe3,
	0x83, 0x71, 0xf5, 0x94, 0x0b, 0x46, 0x40, 0x7e, 0x65, 0xc2, 0x99, 0x1b, 0x7a, 0x87, 0x85, 0x1a,
	0x61, 0x35, 0x3a, 0x1f, 0xfa, 0x69, 0x62, 0x69, 0x34, 0x24, 0xa3, 0x79, 0x6c, 0x21, 0x3b, 0x30,
	0x9a, 0xb8, 0x6e, 0x5f, 0xb9, 0x66, 0x75, 0xe2, 0x6f, 0xbc, 0x69, 0xfa, 0x2e, 0x12, 0x8b, 0x73,
	0xa4, 0xdb, 0xe9, 0x75, 0xee, 0xdf, 0x55, 0x3b, 0xee, 0x97, 0x3b, 0x29, 0x50, 0xb6, 0x79, 0xa1,
	0x50, 0x3c, 0x12, 0x8f, 0x3a, 0x82, 0x8b, 0xe9, 0x53, 0x36, 0xee, 0x18, 0x8b, 0x5f, 0x57, 0xcf,
	0xf5, 0x59, 0xc9, 0x10, 0x7f, 0xeb, 0x2f, 0x77, 0x7c, 0x08, 0xe3, 0xfa, 0x57, 0x1d, 0x9d, 0x54,
	0xe2, 0xfa, 0x6a, 0x9d, 0x11, 0xeb, 0x8a, 0x4d, 0xc5, 0x08, 0x6a, 0xdd, 0xda, 0x04, 0xcb, 0xb3,
	0xd8, 0xad, 0x29, 0x7c, 0x17, 0x59, 0xa1, 0xae, 0x7d, 0x70, 0x97, 0xfa, 0xbb, 0x8d, 0xe8, 0x2d,
	0x18, 0x74, 0xac, 0xc0, 0x7e, 0x09, 0x6f, 0x1d, 0x07, 0x52, 0xd7, 0x0a, 0x70, 0x61, 0x31, 0x2b,
	0x2c, 0x06, 0x48, 0x93, 0x22, 0xf1, 0x13, 0xd8, 0xbc, 0xd5, 0x8a, 0x2a, 0x4c, 0x6a, 0x84, 0x69,
	0x59, 0xf8, 0x29, 0x3c, 0x62, 0x4e, 0xd1, 0x76, 0xc1, 0xe8, 0x49, 0x0e, 0xe4, 0xcb, 0x0b, 0x9c,
	0xc1, 0xf5, 0x55, 0xbb, 0xe5, 0x97, 0xce, 0x81, 0x1f, 0xcc, 0x88, 0xdf, 0xf1, 0x2c, 0xdb, 0xd8,
	0x5f, 0xd8, 0x99, 0x7a, 0xf4, 0xac, 0xb6, 0xf2, 0x35, 0x39, 0x5f, 0x10, 0x09, 0x17, 0x1e, 0xb4,
	0x98, 0x99, 0x92, 0xed, 0x10, 0x5c, 0xdb, 0x2f, 0x98, 0xe1, 0x32, 0x6c, 0x24, 0x64, 0x7c, 0x21, 
	0x24, 0x05, 0x0c, 0x2b, 0x41, 0x40, 0xc8, 0x39, 0xa2, 0xd6, 0xc4, 0xea, 0x02, 0xb4, 0x29, 0x5e,
	0x71, 0xbd, 0x98, 0x8c, 0x5f, 0x75, 0x6e, 0xea, 0xb8, 0x8f, 0xf1, 0x50, 0x3a, 0x07, 0xca, 0x35,
	0xf3, 0xd9, 0x20, 0x55, 0x7a, 0x66, 0x2d, 0xc0, 0x2a, 0x2a, 0xcc, 0xb3, 0x67, 0xb3, 0xf9, 0xd7,
	0xee, 0xee, 0xf2, 0x70, 0x37, 0xff, 0xd9, 0x94, 0xc0, 0xd2, 0xef, 0x63, 0x10, 0x3a, 0xe8, 0x6c,
	0x3a, 0x38, 0x2f, 0xc1, 0x93, 0x2f, 0xeb, 0x85, 0x03, 0xe3, 0x24, 0xe4, 0xfc, 0x36, 0xfa, 0xb2,
	0x93, 0x1c, 0x48, 0x90, 0x83, 0x17, 0xe2, 0xae, 0xe2, 0x64, 0x6b, 0x1f, 0x61, 0x64, 0x52, 0xc4,
	0xce, 0x4c, 0x39, 0x4f, 0x67, 0x3d, 0x9f, 0x79, 0x79, 0x71, 0xe2, 0xec, 0x5d, 0xde, 0xa9, 0x7f,
	0x83, 0xdb, 0x5a, 0x45, 0x9c, 0x0f, 0x70, 0xd4, 0x6f, 0x7f, 0x96, 0x8d, 0xc6, 0x27, 0x56, 0x51,
	0xbd, 0x68, 0x99, 0x71, 0x9a, 0xeb, 0x63, 0x77, 0x46, 0x25, 0xa5, 0xe8, 0xce, 0x4f, 0x97, 0xc8
};

int const GCRYPT_INIT_SUCCESS		= 0;
int const GCRYPT_INIT_ERROR_VERSION	= 1;
int const GCRYPT_INIT_ERROR_OTHER	= 99;

std::string gcrypt_getLastErrorString();

/* Initialize libgcrypt. */
int gcrypt_init();

std::vector<char> genRandom(int size);

int genRandomInt(int max);

int genRandomMdIterations();

// It is tempting to just cast gcry_md_algos, gcry_cipher_algos and gcry_cipher_modes to int and vice-versa.
// But we want to sustain compatibility over gcrypt versions
std::vector<gcry_md_algos> gcrypt_getMdAlgos(bool sorted = false);
gcry_md_algos gcrypt_mapIntToMd(uint32_t v);
uint32_t gcrypt_mapMdToInt(gcry_md_algos v);
std::string toString(gcry_md_algos v);

std::vector<gcry_cipher_algos> gcrypt_getCipherAlgos(bool sorted = false);
gcry_cipher_algos gcrypt_mapIntToCipherAlgo(uint32_t v);
uint32_t gcrypt_mapCipherAlgoToInt(gcry_cipher_algos v);
std::string toString(gcry_cipher_algos v);

std::vector<gcry_cipher_modes> gcrypt_getCipherModes(bool sorted = false);
gcry_cipher_modes gcrypt_mapIntToCipherMode(uint32_t v);
uint32_t gcrypt_mapCipherModeToInt(gcry_cipher_modes v);
std::string toString(gcry_cipher_modes v);

std::vector<char> gcrypt_computeHash(gcry_md_algos gcry_algo, void const* data, int size, int iterations = 1);
int gcrypt_mdSize(gcry_md_algos gcry_algo);

int gcrypt_algo_keyLength(gcry_cipher_algos gcry_algo);

std::vector<char> gcrypt_encryptData(int gcry_cipher_algo, int cipher_mode,
										void const* key, int key_size, void const* data, int size,
										void* initIV, int initIVSize);

std::vector<char> gcrypt_decryptData(int gcry_cipher_algo, int cipher_mode,
										void const* key, int key_size, void const* data, int size,
										void* initIV, int initIVSize);

struct gcrypt_FileInfo {
	bool usingCompression = 1;
	gcry_md_algos gcry_md_algo = GCRY_MD_NONE;
	uint32_t gcry_md_iterations = 1;
	bool gcry_md_iterations_auto = true;
	gcry_cipher_algos gcry_cipher_algo = GCRY_CIPHER_NONE;
	gcry_cipher_modes gcry_cipher_mode = GCRY_CIPHER_MODE_NONE;
	uint32_t passcave_version_min = 0;
	uint32_t passcave_version_maj = 0;

	void secureErase() {
		usingCompression = 0;
		gcry_md_algo = GCRY_MD_NONE;
		gcry_md_iterations = 0;
		gcry_md_iterations_auto = true;
		gcry_cipher_algo = GCRY_CIPHER_NONE;
		gcry_cipher_mode = GCRY_CIPHER_MODE_NONE;
		passcave_version_min = passcave_VERSION_MINOR;
		passcave_version_maj = passcave_VERSION_MAJOR;
	}

	bool isValid() {
		return gcry_md_iterations >= 1 && gcry_md_algo != GCRY_MD_NONE && gcry_cipher_algo != GCRY_CIPHER_NONE && gcry_cipher_mode != GCRY_CIPHER_MODE_NONE;
	}
};

gcrypt_FileInfo gcrypt_getFileInfo(std::string filename);

bool gcrypt_encryptToFile(std::string filename, std::string const& clearKey,
						  gcrypt_FileInfo* fileInfo,
						  void const* data, int size);

std::vector<char> gcrypt_decryptFromFile(std::string filename, std::string const& clearKey, gcrypt_FileInfo* fileInfoPtr = NULL);

}
